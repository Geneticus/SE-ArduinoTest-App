/*-----( Import needed libraries )-----*/
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
/*-----( Declare Constants and Pin Numbers )-----*/
#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);
int led13 = 13;
int led12 = 12;
/*-----( Declare objects )-----*/
static const unsigned char PROGMEM Logo [] = {
0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x70, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x70, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x60, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x60, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xE0, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x60, 0xFF, 0x00, 0xFF, 0xFF, 0xCF, 0xFF, 0xFC, 0x0F, 0xFF, 0xC0, 0x3F, 0xFF, 0xC7, 0xFF, 0xFF,
0x7F, 0xFF, 0x80, 0xFF, 0xFF, 0xCF, 0xFF, 0xFE, 0x0F, 0xFF, 0xE0, 0x7F, 0xFF, 0xC7, 0xFF, 0xFF,
0x7F, 0xFF, 0xC1, 0xFF, 0xFF, 0x8F, 0xFF, 0xFE, 0x0F, 0xFF, 0xE0, 0xFF, 0xFF, 0xC7, 0xFF, 0xFE,
0x1F, 0xFF, 0xC1, 0xC0, 0x00, 0x0E, 0x00, 0x07, 0x0C, 0x00, 0xE0, 0xE0, 0x00, 0x06, 0x00, 0x00,
0x03, 0xFF, 0xC1, 0xC0, 0x00, 0x0E, 0x00, 0x07, 0x0C, 0x00, 0x61, 0xC0, 0x00, 0x06, 0x00, 0x00,
0x01, 0xFF, 0xC1, 0xC0, 0x00, 0x0E, 0x00, 0x0E, 0x1C, 0x00, 0x61, 0xC0, 0x00, 0x07, 0x00, 0x00,
0x01, 0xFF, 0xE1, 0xFF, 0xFF, 0x8F, 0xFF, 0xFE, 0x1F, 0xFF, 0xF1, 0xC0, 0x00, 0x07, 0xFF, 0xF8,
0x01, 0xFF, 0xE0, 0xFF, 0xFF, 0x8F, 0xFF, 0xFE, 0x1F, 0xFF, 0xF1, 0xC0, 0x00, 0x07, 0xFF, 0xF8,
0x01, 0xFF, 0x60, 0x7F, 0xFF, 0xCF, 0xFF, 0xF8, 0x1F, 0xFF, 0xF1, 0xC0, 0x00, 0x07, 0xFF, 0xF8,
0x01, 0xFF, 0x70, 0x00, 0x01, 0xCE, 0x00, 0x00, 0x18, 0x00, 0x71, 0xC0, 0x00, 0x06, 0x00, 0x00,
0x01, 0xFF, 0x70, 0x00, 0x01, 0xCE, 0x00, 0x00, 0x38, 0x00, 0x31, 0xC0, 0x00, 0x06, 0x00, 0x00,
0x01, 0xFF, 0x70, 0x00, 0x01, 0xCE, 0x00, 0x00, 0x38, 0x00, 0x38, 0xE0, 0x00, 0x07, 0x00, 0x00,
0x01, 0xFF, 0x31, 0xFF, 0xFF, 0xCE, 0x00, 0x00, 0x38, 0x00, 0x38, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF,
0x01, 0xFF, 0x31, 0xFF, 0xFF, 0x8E, 0x00, 0x00, 0x38, 0x00, 0x38, 0x7F, 0xFF, 0xE7, 0xFF, 0xFF,
0x01, 0xFF, 0x31, 0xFF, 0xFF, 0x06, 0x00, 0x00, 0x30, 0x00, 0x18, 0x1F, 0xFF, 0xC7, 0xFF, 0xFE,
0x01, 0xFF, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0xFF, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0xFF, 0x01, 0xFF, 0xC8, 0x02, 0x1F, 0xF2, 0x40, 0x13, 0xFF, 0x9F, 0xFC, 0xFF, 0xC3, 0xFF,
0x01, 0xEF, 0x01, 0xFF, 0xEE, 0x03, 0x7F, 0xF2, 0x70, 0x13, 0xFF, 0x9F, 0xFC, 0xFF, 0xE7, 0xFF,
0x01, 0xEF, 0x01, 0x80, 0x0F, 0x03, 0x60, 0x02, 0x78, 0x12, 0x00, 0x10, 0x00, 0x80, 0x6C, 0x00,
0x01, 0xEF, 0x01, 0x80, 0x0D, 0xC3, 0x60, 0x02, 0x4E, 0x13, 0x00, 0x10, 0x00, 0x80, 0x6C, 0x00,
0x01, 0xEF, 0x01, 0xFF, 0x8C, 0xE3, 0x63, 0xF2, 0x47, 0x13, 0xFF, 0x1F, 0xF8, 0xFF, 0xE7, 0xFE,
0x01, 0xEF, 0x01, 0x80, 0x0C, 0x7B, 0x60, 0x32, 0x43, 0x93, 0x00, 0x18, 0x00, 0x8F, 0x00, 0x03,
0x01, 0xEF, 0x01, 0x80, 0x0C, 0x1F, 0x60, 0x12, 0x40, 0xF2, 0x00, 0x10, 0x00, 0x83, 0x80, 0x03,
0x01, 0xEF, 0x01, 0xFF, 0xCC, 0x0F, 0x7F, 0xF2, 0x40, 0x73, 0xFF, 0x9F, 0xFC, 0x80, 0xE7, 0xFF,
0x01, 0xEF, 0x01, 0xFF, 0xEC, 0x02, 0x3F, 0xF2, 0x40, 0x13, 0xFF, 0x9F, 0xFC, 0x80, 0x67, 0xFE,
0x01, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x31, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xF0, 0xFC, 0xFC, 0x66, 0x33, 0x19, 0xFC, 0x06, 0x31, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xD8, 0xCC, 0xC6, 0x66, 0x33, 0xD9, 0x8C, 0x06, 0x31, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xDC, 0xFC, 0xC6, 0x66, 0x33, 0xF9, 0x8C, 0x06, 0x31, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xFC, 0xF8, 0xC6, 0x66, 0x33, 0x79, 0x8C, 0x06, 0x31, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x8E, 0xDC, 0xFC, 0x7E, 0x33, 0x19, 0xFC, 0x07, 0xF1, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xFB, 0x9D, 0xC0, 0x61, 0x9F, 0x98, 0xCF, 0xCF, 0xD9, 0xF9, 0x98, 0xFC, 0x00,
0x00, 0x00, 0x01, 0x98, 0xF1, 0xC0, 0x60, 0x18, 0x1E, 0xCC, 0x03, 0x19, 0x99, 0x98, 0xCC, 0x00,
0x00, 0x00, 0x01, 0xF0, 0x60, 0x00, 0x6F, 0x9E, 0x1F, 0xCF, 0x03, 0x19, 0x81, 0x98, 0xFC, 0x00,
0x00, 0x00, 0x01, 0x98, 0x61, 0xC0, 0x61, 0x98, 0x1B, 0xCC, 0x03, 0x19, 0x99, 0x98, 0x0C, 0x00,
0x00, 0x00, 0x01, 0xF8, 0x61, 0xC0, 0x7F, 0x9F, 0x98, 0xCF, 0xC3, 0x19, 0xF9, 0xF8, 0xFC, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



static const unsigned char PROGMEM Oxygen[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x07, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x1F, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x1C, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3C, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x01, 0xDE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x03, 0xD1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x1C, 0x03, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x1E, 0x0F, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0xFF, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x07, 0xFE, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00,
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00,
	0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
	0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00,
	0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
	0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00,
	0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");

#endif
/*-----( Declare Variables )-----*/
const byte numChars = 64;
char receivedChars[numChars];
boolean message = false;
char startMarkerUsed= '.';

void setup() 
{
  pinMode(led13, OUTPUT);      // sets the digital pin as output
  pinMode(led12, OUTPUT);      // sets the digital pin as output
  Serial.begin(115200);  //set serial to 115200 baud rate
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  display.clearDisplay();
  display.drawBitmap(0, 0, Logo, 128, 64, 1);
  display.display();
  delay(2000);

}
//~4, Here is a first string to parse^<234, 467, 4587, 125><1234, 9467, 4587, 6125>~3, Here is a second string to parse!^~4, Here is a third string to parse^<945, 7, 28, 1159>~3, Here is a fourth string to parse!^
void loop() 
{  
                      //Serial Double Format (StartBit)(DataType,Item,CurrentValue,MaxValue)(StopBit)
                      //StartBit = "\x02"
                      //DataType = Double value starting from 1. Indicates if values are Int, Float, Bool, etc.                      
                      //Item = Double begining with 1. Indicates what the message content is i.e. Health, speed, dampers.
                      //CurrentValue = Send as a double (4 byte limit) send coordinates as strings
                      //MaxValue = Send as a double (4 byte limit) send coordinates as strings
                      //StopBit = "\x03"
                      
                      //Serial String Format (StartBit)(Item,StringValue)(StopBit)
                      //StartBit = "\x04"                                            
                      //Item = Int begining with 1. Indicates what the message content is i.e. 1 =X coordinate, 2=Y Coordinate, 3=Z coordinate
                      //StringValue = Send as a double (4 byte limit) send coordinates as strings                      
                      //StopBit = "\x05"
                      
 recvData();
 
 switch(startMarkerUsed)
 {
    case '<':
    //message = true;
    startMarkerUsed = '.';
	parseDoubleMessage();
     
    break;
    
    case '~':
    //message = true;    
    startMarkerUsed = '.';
	parseStringMessage(); 
    break;

    case '.':
    //do nothing
    break;
    
    default:
    //DebugPrint("Default case: ", 1);
    break;
  
 }
	
}
void DebugPrint( char *debugMessage, int Var1)
{                          
      Serial.print (debugMessage);
      Serial.print (Var1,DEC); 
      Serial.println(); 
}   
void recvData() 
{
	static boolean recvInProgress = true;
	static byte index = 0;
	//char startMarker = 0x2;
	//char endMarker = 0x3;
	char startMarker = '<';
	char endMarker = '>';
	char startMarkerString = '~';
	char endMarkerString = '^';
	char rc;
  
	  //Serial.println("Grabbing message to parse:");
    while (Serial.available() > 0 && message == false)
        {
		      rc = Serial.read();
			  if (rc == startMarker){ startMarkerUsed = rc;
			  //Serial.println(startMarkerUsed);
			  }
			  if (rc == startMarkerString){ startMarkerUsed = rc;
			  //Serial.println(startMarkerUsed);
			  }
		      if (recvInProgress == true) 
		      {
             delay(1);
			 
			 //Serial.print(rc);
			 
			      if (rc != endMarker && rc != endMarkerString ) 
			      {              
             delay(1);
				      receivedChars[index] = rc;
				      index++;
				      if (index >= numChars)
				      {
					      index = numChars - 1;
				      }
			      }
				 				  
    			else 
    			{           
					delay(1); 
					//Serial.println();
					//Serial.println("Terminating read");
    				receivedChars[index] = '\0'; // terminate the string
    				recvInProgress = false;					
    				index = 0;
    				message = true;
					//Serial.print("All Characters reveived: ");
					//Serial.println(String(receivedChars));
					//Serial.println();
          
    			}
    		}
		    else if (rc == startMarker || rc == startMarkerString) 
		    {             
			    startMarkerUsed = rc;
			    recvInProgress = true;
         delay(1);
		    }
	    }
}

void parseDoubleMessage() 
{
          char delimiter[]= ",";
          char* valPosition; 
          double doublearray[5];
          int dataType = 0;
          int item = 0;
          double CurrentValue = 0.0;
          double MaxValue = 0.0;
          int i=0;          
          
          //Serial.println("Parsing Double Message:");         
          
	if (message == true) 
        {
			//Serial.print("RecievedChars: ");
			//Serial.println(receivedChars);
            valPosition = strtok(receivedChars, delimiter);
                         
                    while(valPosition != NULL)
                    {                    
                    doublearray[i] = atoi(valPosition);
                    valPosition = strtok(NULL, delimiter);
                    //DebugPrint("Item Index: ", i);                                        
                    //DebugPrint("Loop Value: ", doublearray[i]);
                    i++;                    
                    }
					doublearray[i] = '\0';
                    //DebugPrint("Current Item1: ", doublearray[0]);
                    //DebugPrint("Current Item2: ", doublearray[1]);
                   // DebugPrint("Current Item3: ", doublearray[2]);
                    //DebugPrint("Current Item4: ", doublearray[3]);
                    //String serialDebug = "";
                    //serialDebug = " Array of ";
                    //serialDebug +=  i,DEC ;
                    //serialDebug += " doubles created.";
                    //Serial.println(serialDebug);                   

					dataType = (int)doublearray[0];                   
					item = (int)doublearray[1];            
					CurrentValue =  doublearray[2];                 
					MaxValue =  doublearray[3];
					//DebugPrint("DataType: ", dataType);
					//DebugPrint("item: ", item);
					DebugPrint("CurrentValue: ", CurrentValue);
					//DebugPrint("MaxValue: ", MaxValue);                  
					message = false;


					
    //Message received:
                //digitalWrite(led13, HIGH);   // turn the LED on (HIGH is the voltage level)
                //delay(1000);               // wait for a second
                //digitalWrite(led13, LOW);    // turn the LED off by making the voltage LOW
                //delay(1000);               // wait for a second
					switch (item)
					{
					case 1:						
						//DisplayHealth();
						break;

					case 2:
						
						//DisplayEnergy();
						break;

					case 3:
						DisplayOxygen(CurrentValue);
						break;

					default:
						//DebugPrint("Default case: ", 1);
						break;

					}

	}
}
void parseStringMessage()
{
          char delimiter[]= ",";
          char* valPosition; 
          int ItemType = 0;
          char ItemText[64];
          int i=0;       
          
          //Serial.println("Parsing String Message:");        
          
  if (message == true) 
        {
			//Serial.print("RecievedChars: ");
			//Serial.println(receivedChars);                
          valPosition = strtok(receivedChars, delimiter);
          ItemType = atoi(valPosition);
          valPosition = strtok(NULL, delimiter);  
          strcpy(ItemText, valPosition); 		  
         }
		  
   //         DebugPrint("Item Type: ", ItemType);                    
   //         String serialDebug = "";
   //         serialDebug = "String received: ";
   //         serialDebug += String(ItemText);
   //         Serial.println(serialDebug);                  
   //         digitalWrite(led12, HIGH);   // turn the LED on (HIGH is the voltage level)
   //         delay(1000);               // wait for a second
   //         digitalWrite(led12, LOW);    // turn the LED off by making the voltage LOW
   //         delay(1000);               // wait for a second
			//message = false;
			//Serial.println("End of String Parsing");
}

void DisplayOxygen(double CurrentValue)
{
	char TempString[5];
  dtostrf(CurrentValue/100,2,2,TempString); 
  String displayVal = String(TempString);  // cast it to string from char  
	display.clearDisplay();
	//display.display();
	//delay(1000);
	display.drawBitmap(0, 0, Oxygen, 128, 64, 1);
	display.setTextSize(2);
	display.setTextColor(WHITE);
	display.setCursor(34, 36);		
	display.println(displayVal + '%');
	display.display();
}

